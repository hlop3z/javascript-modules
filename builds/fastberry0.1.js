var fastberry=function(){"use strict";function getNodes($root){const root=$root?{...$root}:{},items=[];return root.edges?(root.edges.forEach((node=>{const obj=node.node;Object.keys(obj).forEach((key=>{if(obj[key]&&obj[key].edges){const child=getNodes(obj[key]);obj[key]=child}})),items.push(obj)})),items):(Object.keys(root).forEach((key=>{if(root[key]&&root[key].edges){const child=getNodes(root[key]);root[key]=child}})),root)}const GqlBase=class{constructor(info,api){this.api=api,this.$schema=info,this.operations=info.operations,this.roles=Object.keys(info.roles),this.getEdges=edges=>getNodes({edges:edges}),this.getNodes=getNodes,this.$keys=["operations","form","perms","roles","getNodes","getEdges","api"]}static init({info:info=null,api:api=null}={}){return new GqlBase(info,api)}form(name){return{...this.$schema.variables[name]}}perms(name){return this.$schema.roles[name]}};function apiHandler(URL,OPTIONS){return new Promise(((myResolve,myReject)=>{fetch(URL,OPTIONS).then((response=>response.json())).then((json=>myResolve(json))).catch((error=>myReject(error)))}))}class Api{constructor(baseURL,cors,oauth){this.host=baseURL,this.options=function(cors){const optionsDefault={credentials:"same-origin",headers:{Accept:"application/json","Content-Type":"application/json; charset=UTF-8"}};return cors&&(optionsDefault.mode="cors",optionsDefault.credentials="include"),optionsDefault}(cors),this.oauth=oauth,this.baseURL=url=>baseURL+(url.startsWith("/")&&baseURL.endsWith("/")?`${url.replace("/","")}`:url),this.$keys=["get","post","login","graphql"],this.graphql=({info:info=null,url:url=null}={})=>GqlBase.init({info:info,api:data=>this.post(url,data)})}static init({url:url=null,cors:cors=!1,oauth:oauth="/token/"}={}){return new Api(url,cors,oauth)}get(url=null,data=!1){const params=data?`?${new URLSearchParams(data).toString()}`:"";return apiHandler(`${this.baseURL(url)}${params}`,{...this.options,method:"GET"})}post(url=null,data=!1){const path=`${this.baseURL(url)}`,params=data?JSON.stringify(data):data,methodOptions={method:"POST"};data&&(methodOptions.body=params);return apiHandler(path,{...this.options,...methodOptions})}login(data=!1){const url=this.oauth,path=`${this.baseURL(url)}`,methodOptions={method:"POST"};data&&(methodOptions.body=new URLSearchParams(data).toString());return apiHandler(path,{...this.options,...methodOptions,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded;"}})}}function compareObject(obj1,obj2){if(!obj2||"[object Object]"!==Object.prototype.toString.call(obj2))return obj1;const diffs={};return Object.keys(obj1).forEach((key=>{Object.prototype.hasOwnProperty.call(obj1,key)&&function(item1,item2,key){const type1=Object.prototype.toString.call(item1),type2=Object.prototype.toString.call(item2);if("[object Undefined]"!==type2)if(type1===type2)if("[object Object]"!==type1)"[object Array]"!==type1?"[object Function]"===type1?item1.toString()!==item2.toString()&&(diffs[key]=item2):item1!==item2&&(diffs[key]=item2):function(arr1,arr2){if(arr1.length!==arr2.length)return!1;for(let i=0;i<arr1.length;i+=1)if(arr1[i]!==arr2[i])return!1;return!0}(item1,item2)||(diffs[key]=item2);else{const objDiff=compareObject(item1,item2);Object.keys(objDiff).length>0&&(diffs[key]=objDiff)}else diffs[key]=item2;else diffs[key]=null}(obj1[key],obj2[key],key)})),Object.keys(obj2).forEach((key=>{Object.prototype.hasOwnProperty.call(obj2,key)&&(obj1[key]||obj1[key]===obj2[key]||(diffs[key]=obj2[key]))})),diffs}const Api$1={http:Api.init,dict:function(kwargs){class PythonDict{constructor(){this.$data={},this.update(kwargs),this.$dir=["keys","values","items","dict","forDict(key, value)","forList(item)"]}static createClass(){return new PythonDict}get(key){return this.$data[key]}compare(form){return compareObject(this.data,form)}set(key,value){Object.defineProperty(PythonDict.prototype,key,{get(){return this.$data[key]},set(val){this.$data[key]=val}}),this[key]=value}update(form){Object.keys(form).forEach((key=>{this.set(key,form[key])}))}del(key){delete this[key],delete this.$data[key]}get data(){return this.$data}dict(){return this.$data}keys(){return Object.keys(this.$data)}values(){return Object.values(this.$data)}items(){const keys=Object.keys(this.$data),items=[];return keys.forEach((key=>{items.push([key,this.$data[key]])})),items}get dir(){return this.$dir}forDict(method=null){return this.items().map((i=>method(i[0],i[1])))}forList(method=null){return this.items().map((i=>method(i)))}}return Object.create(PythonDict.createClass())}};return function({url:url=null,cors:cors=!1,graphql:graphql="/graphql",login:login="/login",logout:logout="/logout",userMe:userMe="/users/me"}={}){return function(info){const API=Api$1.http({url:url,cors:cors,oauth:login});let GQL=null;info&&(GQL=API.graphql({url:graphql,info:info}));const Login=API.login;return{api:API,gql:GQL,graphql:GQL,login:Login,logout:()=>API.get(logout),userMe:()=>API.get(userMe),dict:Api$1.dict,$keys:["url","cors","info","graphql","login","logout","userMe","dict"]}}}}();
