var Api=function apiWrapper(){function getNodes($root){const root=$root?{...$root}:{},items=[];return root.edges?(root.edges.forEach((node=>{const obj=node.node;Object.keys(obj).forEach((key=>{if(obj[key]&&obj[key].edges){const child=getNodes(obj[key]);obj[key]=child}})),items.push(obj)})),items):(Object.keys(root).forEach((key=>{if(root[key]&&root[key].edges){const child=getNodes(root[key]);root[key]=child}})),root)}const GqlBase=class{constructor(schema,api){this.api=api,this.$schema=schema,this.operations=schema.operations,this.getEdges=edges=>getNodes({edges:edges}),this.getNodes=getNodes,this.$keys=["form","operations","perms","getNodes","getEdges","api"]}static init({info:info=null,api:api=null}={}){return new GqlBase(info,api)}form(name){return{...this.$schema.variables[name]}}perms(name){return this.$schema.roles[name]}};function apiHandler(URL,OPTIONS){return new Promise(((myResolve,myReject)=>{fetch(URL,OPTIONS).then((response=>response.json())).then((json=>myResolve(json))).catch((error=>myReject(error)))}))}const ApiBase=class{constructor(baseURL,cors,oauth){let optionsDefault={credentials:"same-origin",headers:{Accept:"application/json","Content-Type":"application/json; charset=UTF-8"}};cors&&(optionsDefault.mode="cors",optionsDefault.credentials="include"),this.host=baseURL,this.options=optionsDefault,this.oauth=oauth,this.baseURL=url=>baseURL+(url.startsWith("/")&&baseURL.endsWith("/")?`${url.replace("/","")}`:url),this.graphql=({info:info=null,url:url=null}={})=>GqlBase.init({info:info,api:data=>this.post({url:url,data:data})}),this.$keys=["get","post","login","graphql"]}static init({url:url=null,cors:cors=!1,oauth:oauth="/token/"}={}){return new ApiBase(url,cors,oauth)}get({url:url=null,data:data=!1,options:options={}}={}){const params=data?`?${new URLSearchParams(data).toString()}`:"";return apiHandler(`${this.baseURL(url)}${params}`,{...this.options,method:"GET",...options})}post({url:url=null,data:data=!1,options:options={}}={}){const path=`${this.baseURL(url)}`,params=data?JSON.stringify(data):data,method={method:"POST"};return data&&(method.body=params),apiHandler(path,{...this.options,...method,...options})}login(data){const url=this.oauth,path=`${this.baseURL(url)}`,method={method:"POST"};return data&&(method.body=new URLSearchParams(data).toString()),apiHandler(path,{...this.options,...method,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded;"}})}};return ApiBase.init}();